/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#define count 10

struct tree{
    int val;
    int height;
    struct tree *left;
    struct tree *right;
};

int max( int a , int b){
	return a >b? a: b;
}

int height(struct tree *T) {
  if (T == NULL)
    return 0;
  return T->height;
}

struct tree* rightRotate(struct tree *y) {
  struct tree *x = y->left;
  struct tree *T2 = x->right;

  x->right = y;
  y->left = T2;

  y->height = max(height(y->left), height(y->right)) + 1;
  x->height = max(height(x->left), height(x->right)) + 1;

  return x;
}

struct tree* leftRotate(struct tree *x) {
  struct tree *y = x->right;
  struct tree *T2 = y->left;

  y->left = x;
  x->right = T2;

  x->height = max(height(x->left), height(x->right)) + 1;
  y->height = max(height(y->left), height(y->right)) + 1;

  return y;
}

int getBF(struct tree *N) {
  if (N == NULL)
    return 0;
  return height(N->left) - height(N->right);
}

struct tree* minValueNode(struct tree *node) {
  struct tree *current = node;

  while (current->left != NULL)
    current = current->left;

  return current;
}

struct tree*  insert( int x, struct tree *T) {
	if(T == NULL){       
	    T = (struct tree*)malloc(sizeof(struct tree));
	    if( T == NULL ) 
			printf("Ran Out of space!!!");
	    else{   
           T->val = x;
           T->left = T->right = NULL;
	    }
	}
	else
		if( x < T->val )            
			T->left = insert( x, T->left );
		else if( x >= T->val )  
			T->right = insert( x, T->right );
		else
			return T;
			
  T->height = 1 + max(height(T->left),
               height(T->right));

  int balance = getBF(T);
  if (balance > 1 && x < T->left->val)
    return rightRotate(T);

  if (balance < -1 && x > T->right->val)
    return leftRotate(T);

  if (balance > 1 && x > T->left->val) {
    T->left = leftRotate(T->left);
    return rightRotate(T);
  }

  if (balance < -1 && x < T->right->val) {
    T->right = rightRotate(T->right);
    return leftRotate(T);
  }
  return T;
}

struct tree* delete( int val,struct tree *root) {
  if (root == NULL)
    return root;

  if (val < root->val)
    root->left = delete( val,root->left);

  else if (val > root->val)
    root->right = delete(val,root->right);

  else {
    if ((root->left == NULL) || (root->right == NULL)) {
      struct tree *temp = root->left ? root->left : root->right;

      if (temp == NULL) {
        temp = root;
        root = NULL;
      } else
        *root = *temp;
      free(temp);
    } else {
      struct tree *temp = minValueNode(root->right);

      root->val = temp->val;

      root->right = delete(temp->val,root->right);
    }
  }

  if (root == NULL)
    return root;

  root->height = 1 + max(height(root->left),
               height(root->right));

  int balance = getBF(root);
  if (balance > 1 && getBF(root->left) >= 0)
    return rightRotate(root);

  if (balance > 1 && getBF(root->left) < 0) {
    root->left = leftRotate(root->left);
    return rightRotate(root);
  }

  if (balance < -1 && getBF(root->right) <= 0)
    return leftRotate(root);

  if (balance < -1 && getBF(root->right) > 0) {
    root->right = rightRotate(root->right);
    return leftRotate(root);
  }

  return root;
}

struct tree* find_max(struct tree *root){
    if(root==NULL) return root;
    else if(root->right==NULL) return root;
    else find_max(root->right);
}

struct tree* find_min(struct tree *root){
    if(root==NULL) return root;
    else if(root->left==NULL) return root;
    else find_min(root->left);
}

struct tree* find(struct tree *root,int val){
    if(root==NULL) return root;
    else if(val<root->val) return(find(root->left,val));
    else if(val>root->val) return(find(root->right,val));
    else return root;
}

void Inorder(struct tree *root){
    if(root==NULL) return;
    
    Inorder(root->left);
    printf("%d",root->val);
    Inorder(root->right);
}

void Preorder(struct tree *root){
    if(root==NULL) return;
    
    printf("%d",root->val);
    Preorder(root->left);
    Preorder(root->right);
}

void Postorder(struct tree *root){
    if(root==NULL) return;
    
    Postorder(root->left);
    Postorder(root->right);
    printf("%d",root->val);
}

void Display(struct tree *root,int space){
    if(root==NULL) return;
    space += count;
    Display(root->right,space);
    printf("\n");
    for(int i=count;i<space;i++) printf(" ");
    printf("%d",root->val);
    Display(root->left,space);
}

int main()
{
    struct tree *root = NULL,*temp = NULL;
    int opt,val;
    printf("AVL OPTIONS :\n 1-insert 2-delete 3-maximum value 4-minimum value \n 5-find by value 6-Inorder 7-Preorder 8-Postorder\n 9-Display\n");
    while(1){
        printf("option : ");
        scanf("%d",&opt);
        switch(opt){
            case 1:
             printf("Enter the value : ");
             scanf("%d",&val);
             root = insert(val,root);
             break;
            case 2:
             printf("Enter the value to be deleted : ");
             scanf("%d",&val);
             root = delete(val,root);
             break;
            case 3:
             temp = find_max(root);
             if(temp) printf("Max : %d\n",temp->val);
             else printf("Element not found !!!");
             break;
            case 4:
             temp = find_min(root);
             if(temp) printf("Min : %d\n",temp->val);
             else printf("Element not found !!!");
             break;
            case 5:
             printf("Enter the value to be found : ");
             scanf("%d",&val);
             temp = find(root,val);
             if(temp) printf("Found : %d\n",temp->val);
             else printf("Element not found !!!\n");
             break;
            case 6:
             printf("Inorder(left root right) :\n ");
             Inorder(root);
             break;
            case 7:
             printf("Preorder(root left right) :\n ");
             Preorder(root);
             break;
            case 8:
             printf("Postorder(left right root) :\n ");
             Postorder(root);
             break;
            case 9:
             Display(root,0);
             printf("\n");
             break;
            case 10:
             return 0 ;
            default:
             printf("Invalid command \n");
        }
    }

    return 0;
}
