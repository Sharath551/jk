/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#define count 10

struct tree{
    int val;
    struct tree *left;
    struct tree *right;
};

struct tree* insert(struct tree *root,int val){
    if(root==NULL){
        root = (struct tree *)malloc(sizeof(struct tree));
        if(root == NULL) printf("No memory\n");
        else{
          root->val = val;
          root->left = NULL;
          root->right= NULL;
        }
    }
    else{
        if(val<root->val) root->left = insert(root->left,val);
        else if(val>=root->val) root-> right = insert(root->right,val);
    }
    return root;
}

struct tree* find_max(struct tree *root){
    if(root==NULL) return root;
    else if(root->right==NULL) return root;
    else find_max(root->right);
}

struct tree* find_min(struct tree *root){
    if(root==NULL) return root;
    else if(root->left==NULL) return root;
    else find_min(root->left);
}

struct tree* delete(struct tree *root,int val){
    struct tree *temp,*child;
    if(root==NULL) printf("Element not found !!\n");
    else{
        if(val<root->val) root->left = delete(root->left,val);
        else if(val>root->val) root->right = delete(root->right,val);
        else{
           if(root->left && root->right){
             temp = find_min(root->right);
             root->val = temp->val;
             root->right = delete(root->right,root->val);
            }
           else{
             temp = root;
             if(temp->right==NULL) child = temp->left;
             if(temp->left==NULL)  child = temp->right;
             free(temp);
             return child;
           }
            
        }
       return root; 
        
    }
}

struct tree* find(struct tree *root,int val){
    if(root==NULL) return root;
    else if(val<root->val) return(find(root->left,val));
    else if(val>root->val) return(find(root->right,val));
    else return root;
}

void Inorder(struct tree *root){
    if(root==NULL) return;
    
    Inorder(root->left);
    printf("%d",root->val);
    Inorder(root->right);
}

void Preorder(struct tree *root){
    if(root==NULL) return;
    
    printf("%d",root->val);
    Preorder(root->left);
    Preorder(root->right);
}

void Postorder(struct tree *root){
    if(root==NULL) return;
    
    Postorder(root->left);
    Postorder(root->right);
    printf("%d",root->val);
}

void Display(struct tree *root,int space){
    if(root==NULL) return;
    space += count;
    Display(root->right,space);
    printf("\n");
    for(int i=count;i<space;i++) printf(" ");
    printf("%d",root->val);
    Display(root->left,space);
}

int main()
{
    struct tree *root = NULL,*temp = NULL;
    int opt,val;
    printf("BST OPTIONS :\n 1-insert 2-delete 3-maximum value 4-minimum value \n 5-find by value 6-Inorder 7-Preorder 8-Postorder\n 9-Display\n");
    while(1){
        printf("option : ");
        scanf("%d",&opt);
        switch(opt){
            case 1:
             printf("Enter the value : ");
             scanf("%d",&val);
             root = insert(root,val);
             break;
            case 2:
             printf("Enter the value to be deleted : ");
             scanf("%d",&val);
             root = delete(root,val);
             break;
            case 3:
             temp = find_max(root);
             if(temp) printf("Max : %d\n",temp->val);
             else printf("Element not found !!!");
             break;
            case 4:
             temp = find_min(root);
             if(temp) printf("Min : %d\n",temp->val);
             else printf("Element not found !!!");
             break;
            case 5:
             printf("Enter the value to be found : ");
             scanf("%d",&val);
             temp = find(root,val);
             if(temp) printf("Found : %d\n",temp->val);
             else printf("Element not found !!!\n");
             break;
            case 6:
             printf("Inorder(left root right) :\n ");
             Inorder(root);
             break;
            case 7:
             printf("Preorder(root left right) :\n ");
             Preorder(root);
             break;
            case 8:
             printf("Postorder(left right root) :\n ");
             Postorder(root);
             break;
            case 9:
             Display(root,0);
             printf("\n");
             break;
            case 10:
             return 0 ;
            default:
             printf("Invalid command \n");
        }
    }

    return 0;
}
