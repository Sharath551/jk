/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
char stack[100];
int  opt, max_size= sizeof(stack)-1/sizeof(int), top = -1;
void push(char c){
    if(top>= max_size){
        printf("stack is overflowed");
    }
    else{
       
        stack[++top]=c;
        
    }
    
}
char pop(){
    if(top<=-1){
        printf("Stack is emptied");
        
    }
    else{
        return stack[top--];
    }
}
int precedence(char ch){
    
        if(ch=='('||ch==')'){
            return -1;
        }
        else if(ch=='^'){
            return 3;
        }
        else if(ch=='*'||ch=='/'){
            return 2;
        }
        else if(ch=='+'||ch=='-'){
            return 1;
        }
    
}
int is_operator(char ch){
        if (ch=='/'||ch=='*'||ch=='+'||ch=='-'||ch=='%'||ch=='^'||ch=='('||ch==')'){
            return 1;
        }
            
        else{
            return 0;
        } 
}
int main()
{  
    char arr[100];
    scanf("%s",arr);
    int i=0;
    while(arr[i]!='\0'){
        if(!is_operator(arr[i])){
            printf("%c",arr[i]);
            
        }
        else if(arr[i] == '(')
        {
            push(arr[i]);
        }
        else if(arr[i] == ')')
        {
            while(top != -1 && stack[top] != '(')
            {
                printf("%c",pop());
            }
            pop();
        }
        else if(is_operator(arr[i]))
        {
            while(top!=-1 && precedence(arr[i]) <= precedence(stack[top]))
            {
                if( arr[i] == '^') break;
                printf("%c",pop());
            }
            
            push(arr[i]);
        }
        
            
        
        i++;
    }
    
    while(top!=-1){
            printf("%c",pop());
            
        }
   
    

    return 0;
}

