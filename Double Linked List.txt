/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *prev;
    struct node *next;
};

struct node* new_node(struct node *head){
    printf("Enter the data for node : ");
    int data;
    scanf("%d",&data);
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    temp->prev = NULL;
    temp->next = NULL;
    head = temp;
    return head;
}

void print_data(struct node *head){
    if(head==NULL) printf("\nThe list is empty");
    else{
    struct node *ptr = head;
    printf("The data are : ");
    while(ptr != NULL){
        printf("%d ",ptr->data);
        ptr=ptr->next;
    }
    printf("\n");
  }
}

struct node* insert_at_start(struct node *head){
    if(head==NULL) printf("The list is empty\n");
    else{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    printf("Enter the data : ");
    int data;
    scanf("%d",&data);
    temp->data = data;
    temp->prev = NULL;
    temp->next = NULL;
    
    temp->next = head;
    head->prev = temp;
    head = temp;
    
    return head;
    }
}

struct node* insert_at_end(struct node *head){
    if(head==NULL) printf("The list is empty\n");
    else{
    struct node *temp = (struct node *)malloc(sizeof(struct node)),*temphead;
    printf("Enter the data : ");
    int data;
    scanf("%d",&data);
    temp->data = data;
    temp->prev = NULL;
    temp->next = NULL;
    
    temphead = head ;
    while(temphead->next != NULL) 
    temphead = temphead->next;
    temphead->next = temp;
    temp->prev = temphead;
    
    return head;
    }
}

void del_by_key(struct node **head_ref){
    int key;
    printf("Enter the value : ");
    scanf("%d",&key);
    struct node *temp,*lprev;
    temp = *head_ref;
    if(temp!=0 && temp->data == key){
        *head_ref = temp->next;
        free(temp);
    }
    
    while(temp!=0 && temp->data!=key){
        lprev = temp;
        temp = temp->next;
    }
    
    if(temp==NULL){
        printf("NO SUCH VALUE\n");
        return;
    }
    
    lprev->next = temp->next;
    lprev->prev = temp->prev;
    free(temp);
}

int main()
{
    struct node *head = NULL;
    head = new_node(head);
     
    int opt;
    printf("Enter the option as below :\n1 - insert at start 2 - insert at end\n3 - delete an element 4 - display 5 - exit\n");
    while(1){
        printf("option : ");
        scanf("%d",&opt);
        switch(opt){
            case 1:
              head = insert_at_start(head);
              break;
            case 2:
              head = insert_at_end(head);
              break;
            case 3:
              del_by_key(&head);
              break;
            case 4:
              print_data(head);
              break;
            case 5:
             return 0;
            default:
              printf("INVALID COMMAND!!\n");
        }
    }
   
    return 0;
}
